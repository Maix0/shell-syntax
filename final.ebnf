source_file         ::=  '\n' * | complete_command ( '\n' + complete_command )* '\n' *
complete_command    ::=  list separator_op?
list                ::=  and_or ( separator_op and_or )*
and_or              ::=  pipeline ( ( '&&' | '||' ) '\n' * pipeline )*
pipeline            ::=  '!'? pipe_sequence
pipe_sequence       ::=  command ( '|' '\n' * command )*
command             ::=  simple_command | compound_command redirect_list? | function_definition
compound_command    ::=  brace_group | subshell | for_clause | case_clause | if_clause | while_clause | until_clause
subshell            ::=  '(' compound_list ')'
compound_list       ::=  '\n' * term separator?
term                ::=  and_or ( separator and_or )*
for_clause          ::=  'for' name ( ( '\n' * 'in' WORD* )? sequential_sep )? do_group
case_list_ns        ::=  case_list? case_item_ns
case_list           ::=  case_item+
case_item_ns        ::=  '('? pattern ')' ( '\n' * | compound_list )
case_item           ::=  '('? pattern ')' ( '\n' * | compound_list ) ';;' '\n' *
if_clause           ::=  'if' compound_list 'then' compound_list ( ( 'elif' compound_list 'then' compound_list )* ( 'elif' compound_list 'then' | 'else' ) compound_list )? 'fi'
while_clause        ::=  'while' compound_list do_group
until_clause        ::=  'until' compound_list do_group
function_definition ::=  fname '(' ')' '\n' * function_body
function_body       ::=  compound_command redirect_list?
brace_group         ::=  '{' compound_list '}'
do_group            ::=  'do' compound_list 'done'
simple_command      ::=  cmd_prefix ( cmd_word cmd_prefix? )? | cmd_name cmd_prefix?
redirect_list       ::=  io_redirect+
io_file             ::=  ( '<' | '<&' | '>' | '>&' | '>>' | '<>' | '>|' ) filename
io_here             ::=  ( '<<' | '<<-' ) here_end
separator_op        ::=  '&' | ';'
separator           ::=  separator_op '\n' * | '\n' +
sequential_sep      ::=  ';' '\n' * | '\n' +
io_redirect         ::=  [1-9][0-9]*? ( io_file | io_here )
case_clause         ::=  'case' WORD '\n' * 'in' '\n' * ( case_list | case_list_ns )? 'esac'
WORD                ::=  [a-zA-Z__][a-zA-Z_0-9_]*
cmd_prefix          ::=  io_redirect | assignment+
cmd_suffix          ::=  io_redirect | WORD+
pattern             ::=  WORD ( '|' WORD )*
fname               ::=  WORD
name                ::=  [a-zA-Z_][a-zA-Z0-9_]*
assignment          ::=  name '=' WORD
cmd_name            ::=  WORD
cmd_word            ::=  assignment
filename            ::=  WORD
here_end            ::=  WORD
